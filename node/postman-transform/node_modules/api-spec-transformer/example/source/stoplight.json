{
    "swagger": "2.0",
    "info": {
        "version": "1.0.0",
        "title": "Test Project",
        "description": ""
    },
    "paths": {
        "/pets/{petName}/photos/{id}": {
            "parameters": [],
            "delete": {
                "responses": {
                    "400": {
                        "description": "The photo was deleted successfully"
                    }
                },
                "parameters": [],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "operationId": "deletePetPhoto",
                "summary": "",
                "description": "Deletes a pet photo",
                "x-stoplight-before": "function(){return 'Hello World';}",
                "x-stoplight-after": "function(){return 'Hello World After';}",
                "x-stoplight-mock": {
                    "enabled": true,
                    "statusCode": 400
                },
                "x-stoplight-id": "abcd"
            },
            "get": {
                "responses": {
                    "400": {
                        "description": "Returns the pet photo",
                        "schema": {
                            "type": "file"
                        }
                    }
                },
                "parameters": [],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "image/jpeg"
                ],
                "operationId": "getPetPhoto",
                "summary": "",
                "description": "Gets a pet photo",
                "x-stoplight-before": "",
                "x-stoplight-after": "",
                "x-stoplight-mock": {
                    "enabled": null,
                    "statusCode": null
                }
            }
        },
        "/pets/{petName}/photos": {
            "parameters": [],
            "get": {
                "responses": {
                    "200": {
                        "description": "Returns the list of photos",
                        "schema": {
                            "type": "array",
                            "items": {
                                "properties": {
                                    "id": {
                                        "type": "integer",
                                        "format": "int32",
                                        "description": "The auto-generated photo ID"
                                    },
                                    "label": {
                                        "type": "string"
                                    },
                                    "description": {
                                        "type": "string"
                                    },
                                    "photo": {
                                        "description": "Information about the photo (size, file name, etc.)"
                                    }
                                }
                            }
                        }
                    }
                },
                "parameters": [],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "operationId": "",
                "summary": "",
                "description": "Get a list of the photos for a pet",
                "x-stoplight-before": "",
                "x-stoplight-after": "",
                "x-stoplight-mock": {
                    "enabled": null,
                    "statusCode": null
                }
            },
            "post": {
                "responses": {
                    "400": {
                        "description": "Returns the photo information",
                        "schema": {
                            "properties": {
                                "id": {
                                    "type": "integer",
                                    "format": "int32",
                                    "description": "The auto-generated photo ID"
                                },
                                "label": {
                                    "type": "string"
                                },
                                "description": {
                                    "type": "string"
                                },
                                "photo": {
                                    "description": "Information about the photo (size, file name, etc.)"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "type": "string",
                        "name": "id",
                        "in": "formData",
                        "required": false,
                        "description": "The photo ID (generated automatically)"
                    },
                    {
                        "type": "string",
                        "name": "label",
                        "in": "formData",
                        "required": true,
                        "description": "A label for the photo"
                    },
                    {
                        "type": "string",
                        "name": "description",
                        "in": "formData",
                        "required": false,
                        "description": "An optional description of the photo"
                    },
                    {
                        "type": "string",
                        "name": "photo",
                        "in": "formData",
                        "required": true,
                        "description": "The pet photo"
                    }
                ],
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "operationId": "addPetPhoto",
                "summary": "",
                "description": "Upload a new pet photo",
                "x-stoplight-before": "",
                "x-stoplight-after": "",
                "x-stoplight-mock": {
                    "enabled": null,
                    "statusCode": null
                }
            }
        },
        "/pets": {
            "parameters": [],
            "delete": {
                "responses": {
                    "400": {
                        "description": "Returns the pets that were deleted",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/pet"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "type": "array",
                        "description": "Filters pets by one or more tags",
                        "items": {
                            "type": "string"
                        },
                        "name": "tags",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filters pets by type (dog, cat, or bird)",
                        "name": "type",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Filters pets by age",
                        "name": "age",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Filters pets by date of birth",
                        "name": "dob",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filters pets by city",
                        "name": "address.city",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filters pets by state",
                        "name": "address.state",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Filters pets by zip code",
                        "name": "address.zipcode",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filters pets by veterinarian name",
                        "name": "vet.name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filters pets by veterinarian city",
                        "name": "vet.address.city",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filters pets by veterinarian state",
                        "name": "vet.address.state",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Filters pets by veterinarian zip code",
                        "name": "vet.address.zipcode",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "",
                        "name": "token",
                        "in": "header",
                        "required": true
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "operationId": "deletePets",
                "summary": "",
                "description": "Deletes all pets, optionally filtered by one or more criteria",
                "x-stoplight-before": "",
                "x-stoplight-after": "",
                "x-stoplight-mock": {
                    "enabled": null,
                    "statusCode": null
                }
            },
            "get": {
                "responses": {
                    "400": {
                        "description": "Returns the matching pets",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/pet"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "type": "array",
                        "description": "Filters pets by one or more tags",
                        "items": {
                            "type": "string"
                        },
                        "name": "tags",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filters pets by type (dog, cat, or bird)",
                        "name": "type",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Filters pets by age",
                        "name": "age",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Filters pets by date of birth",
                        "name": "dob",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filters pets by city",
                        "name": "address.city",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filters pets by state",
                        "name": "address.state",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Filters pets by zip code",
                        "name": "address.zipcode",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filters pets by veterinarian name",
                        "name": "vet.name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filters pets by veterinarian city",
                        "name": "vet.address.city",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filters pets by veterinarian state",
                        "name": "vet.address.state",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Filters pets by veterinarian zip code",
                        "name": "vet.address.zipcode",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "",
                        "name": "token",
                        "in": "header",
                        "required": true
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "operationId": "findPets",
                "summary": "",
                "description": "Returns all pets, optionally filtered by one or more criteria",
                "x-stoplight-before": "",
                "x-stoplight-after": "",
                "x-stoplight-mock": {
                    "enabled": null,
                    "statusCode": null
                }
            },
            "post": {
                "responses": {
                    "201": {
                        "description": "Returns the newly-added pet",
                        "schema": {
                            "$ref": "#/definitions/pet"
                        }
                    }
                },
                "parameters": [
                    {
                        "type": "string",
                        "name": "pet",
                        "in": "formData",
                        "required": true,
                        "description": "The pet to add to the store"
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "operationId": "addPet",
                "summary": "",
                "description": "Creates a new pet in the store",
                "x-stoplight-before": "",
                "x-stoplight-after": "",
                "x-stoplight-mock": {
                    "enabled": null,
                    "statusCode": null
                }
            }
        },
        "/pets/{petName}": {
            "parameters": [],
            "patch": {
                "responses": {
                    "400": {
                        "description": "Returns the updated pet data",
                        "schema": {
                            "$ref": "#/definitions/pet"
                        }
                    }
                },
                "parameters": [
                    {
                        "type": "string",
                        "name": "pet",
                        "in": "formData",
                        "required": true,
                        "description": "The updated pet info"
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "operationId": "",
                "summary": "",
                "description": "Updates a pet by name",
                "x-stoplight-before": "",
                "x-stoplight-after": "",
                "x-stoplight-mock": {
                    "enabled": null,
                    "statusCode": null
                }
            },
            "delete": {
                "responses": {
                    "400": {
                        "description": "Returns the pet that was deleted",
                        "schema": {
                            "$ref": "#/definitions/pet"
                        }
                    }
                },
                "parameters": [],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "operationId": "deletePet",
                "summary": "",
                "description": "Deletes a single pet based on the name supplied",
                "x-stoplight-before": "",
                "x-stoplight-after": "",
                "x-stoplight-mock": {
                    "enabled": null,
                    "statusCode": null
                }
            },
            "get": {
                "responses": {
                    "400": {
                        "description": "Returns the pet data",
                        "schema": {
                            "$ref": "#/definitions/pet"
                        }
                    }
                },
                "parameters": [],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "operationId": "findPetByName",
                "summary": "",
                "description": "Returns a pet by name",
                "x-stoplight-before": "",
                "x-stoplight-after": "",
                "x-stoplight-mock": {
                    "enabled": null,
                    "statusCode": null
                }
            }
        }
    },
    "definitions": {
        "address": {
            "properties": {
                "street": {
                    "type": "string",
                    "minLength": 1
                },
                "city": {
                    "type": "string",
                    "minLength": 1
                },
                "state": {
                    "type": "string",
                    "minLength": 2,
                    "maxLength": 2,
                    "pattern": "^[A-Z]+$"
                },
                "zipcode": {
                    "type": "integer",
                    "minimum": 10000,
                    "maximum": 99999
                }
            },
            "x-stoplight-id": "abcd"
        },
        "veterinarian": {
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "type": "string",
                    "minLength": 1
                },
                "address": {
                    "$ref": "#/definitions/address"
                }
            }
        },
        "pet": {
            "required": [
                "name",
                "type"
            ],
            "properties": {
                "name": {
                    "type": "string",
                    "minLength": 4,
                    "pattern": "^[a-zA-Z0-9- ]+$"
                },
                "age": {
                    "type": "integer"
                },
                "dob": {
                    "type": "string",
                    "format": "date"
                },
                "type": {
                    "type": "string",
                    "enum": [
                        "cat",
                        "dog",
                        "bird"
                    ]
                },
                "address": {
                    "$ref": "#/definitions/address"
                },
                "vet": {
                    "$ref": "#/definitions/veterinarian"
                },
                "tags": {
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string",
                        "minLength": 1
                    }
                }
            }
        }
    },
    "basePath": "",
    "host": "http://localhost:3000",
    "schemes": [
        "http",
        "https",
        "ws"
    ],
    "produces": [
        "application/json"
    ],
    "consumes": [
        "application/json"
    ],
    "securityDefinitions": {
        "basic": {
            "type": "basic"
        }
    },
    "x-stoplight": {
        "before": "function(){return 'Hello World env before';}",
        "after": "function(){return 'Hello World env before';}",
        "proxy": {
            "foo": "bar"
        },
        "functions": [
            {
                "x-stoplight-id": "abcd",
                "name": "onlyProcessPath",
                "description": "If your API lives at a subpath, for example, localhost:3000/api, then this function is useful to only learn / log requests that match the given subpath.",
                "script": "function (ctx, request, subpath) {\n  // for example, onlyProcessPath(ctx, request, \"api\") will turn off logging/learning for any\n  // requests that don't have \"api\" in their path.\n  if (request.url.path.get().indexOf(subpath) == -1) {\n     ctx.log.set(false)\n     ctx.learn.set(false)\n  }\n}"
            },
            {
                "name": "validateResponse",
                "description": "Calling this function will validate the response, and add a response header indicating wether or not validation passed. It also adds all the validation errors to the entry messages, which are viewable in an entry tab. Lastly, it extends mocking with useful error messages.",
                "script": "function (ctx, response) {\n  var messages = response.validate(),\n      isValid = true\n      \n  if (messages.length) {\n    isValid = false\n    for (var i in messages) {\n      response.logError(messages[i])\n    }\n    \n    // If mocking is enabled and validation fails, this means \n    // the example mock we've set for this endpoint/status code \n    // does not match the schema.. we don't want developers working \n    // off of an invalid example, so here we ovewrite the response\n    // with the the validation error messages.\n    if (ctx.mock.enabled.get()) {\n      response.body.set(messages)\n    }\n  }\n  \n  response.header.set(\"Validation-Passed\", isValid)\n  ctx.isValid = isValid\n  response.valid.set(isValid)\n}"
            },
            {
                "name": "addRandomLatency",
                "description": "Sleep for a random amount of time. Useful to simulate latency.",
                "script": "function (min, max) {\n  SL.sleep(SL.rand(min, max))\n}"
            },
            {
                "name": "queryStringMocking",
                "description": "This extends the basic mocking functionality, and makes it possible to control mocking behavior via the request query string.",
                "script": "function (ctx, request) {\n  // For example, adding ?mock=200 to a request url will enable mocking,\n  // using the example endpoint response for the 200 status code.\n  var mock = request.url.query.get(\"mock\")\n  if (mock) {\n    ctx.mock.set(true, mock)\n  }\n}"
            },
            {
                "name": "validateRequest",
                "description": "Calling this function will validate the request, and add a request header indicating wether or not validation passed. It also adds all the validation errors to the entry messages, which are viewable in an entry tab.",
                "script": "function (ctx, request) {\n  var messages = request.validate(),\n      isValid = true\n\n  if (messages.length) {\n    isValid = false\n\n    for (var i in messages) {\n      request.logError(messages[i])\n    }\n\n    // Uncomment the line below to respond immediately\n    // with the validation error messages. Useful to let\n    // developers know exactly what is wrong with their API request.\n    //\n    // var response = request.hijack(400, \"application/json\", messages)\n  }\n\n  request.header.set(\"Validation-Passed\", isValid)\n  ctx.isValid = isValid\n  request.valid.set(isValid)\n}"
            }
        ],
        "groups": {
          "endpoints": [
            {
              "name": "Group Name",
              "items": ["abcd"]
            }
          ],
          "schemas": [
            {
                "name": "My Group",
                "items": ["abcd"]
            }
          ],
          "utilFuncs": [
            {
                "name": "My Util Group",
                "items": ["abcd"]
            }
          ]
        }
    }
}
