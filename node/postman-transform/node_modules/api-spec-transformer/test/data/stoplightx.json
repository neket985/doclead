{
  "swagger": "2.0",
  "schemes": [
    "http",
    "https",
    "ws"
  ],
  "host": "localhost:3000",
  "info": {
    "version": "1.0.0",
    "title": "Test Project",
    "description": ""
  },
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/pets/{petName}/photos/{id}": {
      "parameters": [
        {
          "name": "petName",
          "in": "path",
          "description": "name for the pet",
          "required": true,
          "type": "string"
        },
        {
          "name": "id",
          "in": "path",
          "description": "id for the pet",
          "required": true,
          "type": "integer"
        }
      ],
      "delete": {
        "description": "Deletes a pet photo",
        "operationId": "deletePetPhoto",
        "responses": {
          "400": {
            "description": "The photo was deleted successfully"
          }
        },
        "tags": [
          "Group1"
        ],
        "x-stoplight": {
          "id": "DELETE_pets-petName-photos-id",
          "beforeScript": "function(){return 'Hello World';}",
          "afterScript": "function(){return 'Hello World After';}",
          "public": true,
          "mock": {
            "enabled": true,
            "dynamic": false,
            "statusCode": 400
          }
        }
      },
      "get": {
        "description": "Gets a pet photo",
        "operationId": "getPetPhoto",
        "produces": [
          "image/jpeg"
        ],
        "responses": {
          "400": {
            "description": "Returns the pet photo",
            "schema": {
              "type": "file"
            }
          }
        },
        "x-stoplight": {
          "id": "GET_pets-petName-photos-id",
          "beforeScript": "function(){return 'Hello World';}",
          "afterScript": "function(){return 'Hello World After';}",
          "public": false,
          "mock": {
            "enabled": false,
            "dynamic": true,
            "statusCode": 200
          }
        }
      }
    },
    "/pets/{petName}/photos": {
      "parameters": [
        {
          "name": "petName",
          "in": "path",
          "description": "name for the pet",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "description": "Get a list of the photos for a pet",
        "responses": {
          "200": {
            "description": "Returns the list of photos",
            "schema": {
              "type": "array",
              "items": {
                "properties": {
                  "id": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The auto-generated photo ID"
                  },
                  "label": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "photo": {
                    "description": "Information about the photo (size, file name, etc.)"
                  }
                }
              }
            }
          }
        },
        "operationId": "getPetPhotos",
        "x-stoplight": {
          "id": "GET_pets-petName-photos",
          "beforeScript": "function(){return 'Hello World';}",
          "afterScript": "function(){return 'Hello World After';}",
          "public": true,
          "mock": {
            "enabled": true,
            "statusCode": 400
          }
        }
      },
      "post": {
        "description": "Upload a new pet photo",
        "operationId": "addPetPhoto",
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "description": "The photo ID (generated automatically)",
            "in": "formData",
            "name": "id",
            "type": "string"
          },
          {
            "description": "A label for the photo",
            "in": "formData",
            "name": "label",
            "required": true,
            "type": "string"
          },
          {
            "description": "An optional description of the photo",
            "in": "formData",
            "name": "description",
            "type": "string"
          },
          {
            "description": "The pet photo",
            "in": "formData",
            "name": "photo",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Returns the photo information",
            "schema": {
              "properties": {
                "id": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The auto-generated photo ID"
                },
                "label": {
                  "type": "string"
                },
                "description": {
                  "type": "string"
                },
                "photo": {
                  "description": "Information about the photo (size, file name, etc.)"
                }
              }
            }
          }
        },
        "x-stoplight": {
          "id": "POST_pets-petName-photos",
          "beforeScript": "function(){return 'Hello World';}",
          "afterScript": "function(){return 'Hello World After';}",
          "public": true,
          "mock": {
            "enabled": true,
            "statusCode": 400
          }
        }
      }
    },
    "/pets": {
      "delete": {
        "description": "Deletes all pets, optionally filtered by one or more criteria",
        "operationId": "deletePets",
        "parameters": [
          {
            "name": "tags",
            "required": false,
            "in": "query",
            "description": "Filters pets by one or more tags",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "required": false,
            "in": "query",
            "description": "Filters pets by type (dog, cat, or bird)",
            "type": "string"
          },
          {
            "name": "age",
            "required": false,
            "in": "query",
            "description": "Filters pets by age",
            "type": "integer"
          },
          {
            "name": "dob",
            "required": false,
            "in": "query",
            "description": "Filters pets by date of birth",
            "type": "string"
          },
          {
            "name": "address.city",
            "required": false,
            "in": "query",
            "description": "Filters pets by city",
            "type": "string"
          },
          {
            "name": "address.state",
            "required": false,
            "in": "query",
            "description": "Filters pets by state",
            "type": "string"
          },
          {
            "name": "address.zipcode",
            "required": false,
            "in": "query",
            "description": "Filters pets by zip code",
            "type": "integer"
          },
          {
            "name": "vet.name",
            "required": false,
            "in": "query",
            "description": "Filters pets by veterinarian name",
            "type": "string"
          },
          {
            "name": "vet.address.city",
            "required": false,
            "in": "query",
            "description": "Filters pets by veterinarian city",
            "type": "string"
          },
          {
            "name": "vet.address.state",
            "required": false,
            "in": "query",
            "description": "Filters pets by veterinarian state",
            "type": "string"
          },
          {
            "name": "vet.address.zipcode",
            "required": false,
            "in": "query",
            "description": "Filters pets by veterinarian zip code",
            "type": "integer"
          },
          {
            "name": "token",
            "in": "header",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Returns the pets that were deleted",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/pet"
              }
            }
          }
        },
        "x-stoplight": {
          "id": "DELETE_pets",
          "beforeScript": "function(){return 'Hello World';}",
          "afterScript": "function(){return 'Hello World After';}",
          "public": true,
          "mock": {
            "enabled": true,
            "statusCode": 400
          }
        }
      },
      "get": {
        "description": "Returns all pets, optionally filtered by one or more criteria",
        "operationId": "findPets",
        "parameters": [
          {
            "name": "tags",
            "required": false,
            "in": "query",
            "description": "Filters pets by one or more tags",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "required": false,
            "in": "query",
            "description": "Filters pets by type (dog, cat, or bird)",
            "type": "string"
          },
          {
            "name": "age",
            "required": false,
            "in": "query",
            "description": "Filters pets by age",
            "type": "integer"
          },
          {
            "name": "dob",
            "required": false,
            "in": "query",
            "description": "Filters pets by date of birth",
            "type": "string"
          },
          {
            "name": "address.city",
            "required": false,
            "in": "query",
            "description": "Filters pets by city",
            "type": "string"
          },
          {
            "name": "address.state",
            "required": false,
            "in": "query",
            "description": "Filters pets by state",
            "type": "string"
          },
          {
            "name": "address.zipcode",
            "required": false,
            "in": "query",
            "description": "Filters pets by zip code",
            "type": "integer"
          },
          {
            "name": "vet.name",
            "required": false,
            "in": "query",
            "description": "Filters pets by veterinarian name",
            "type": "string"
          },
          {
            "name": "vet.address.city",
            "required": false,
            "in": "query",
            "description": "Filters pets by veterinarian city",
            "type": "string"
          },
          {
            "name": "vet.address.state",
            "required": false,
            "in": "query",
            "description": "Filters pets by veterinarian state",
            "type": "string"
          },
          {
            "name": "vet.address.zipcode",
            "required": false,
            "in": "query",
            "description": "Filters pets by veterinarian zip code",
            "type": "integer"
          },
          {
            "name": "token",
            "in": "header",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Returns the matching pets",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/pet"
              }
            }
          }
        },
        "tags": [
          "Group2"
        ],
        "x-stoplight": {
          "id": "GET_pets",
          "beforeScript": "function(){return 'Hello World';}",
          "afterScript": "function(){return 'Hello World After';}",
          "public": true,
          "mock": {
            "enabled": true,
            "statusCode": 400
          }
        }
      },
      "post": {
        "description": "Creates a new pet in the store",
        "operationId": "addPet",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "properties": {
                "pet": {
                  "type": "string",
                  "description": "The pet to add to the store"
                }
              },
              "required": [
                "pet"
              ]
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Returns the newly-added pet",
            "schema": {
              "$ref": "#/definitions/pet"
            }
          }
        },
        "x-stoplight": {
          "id": "POST_pets",
          "beforeScript": "function(){return 'Hello World';}",
          "afterScript": "function(){return 'Hello World After';}",
          "public": true,
          "mock": {
            "enabled": true,
            "statusCode": 400
          }
        }
      }
    },
    "/pets/{petName}": {
      "parameters": [
        {
          "name": "petName",
          "in": "path",
          "description": "name for the pet",
          "required": true,
          "type": "string"
        }
      ],
      "patch": {
        "description": "Updates a pet by name",
        "operationId": "updatePetName",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "properties": {
                "pet": {
                  "type": "string",
                  "description": "The updated pet info"
                }
              },
              "required": [
                "pet"
              ]
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Returns the updated pet data",
            "schema": {
              "$ref": "#/definitions/pet"
            }
          }
        },
        "x-stoplight": {
          "id": "PATCH_pets-petName",
          "beforeScript": "function(){return 'Hello World';}",
          "afterScript": "function(){return 'Hello World After';}",
          "public": true,
          "mock": {
            "enabled": true,
            "statusCode": 400
          }
        }
      },
      "delete": {
        "description": "Deletes a single pet based on the name supplied",
        "operationId": "deletePet",
        "responses": {
          "400": {
            "description": "Returns the pet that was deleted",
            "schema": {
              "$ref": "#/definitions/pet"
            }
          }
        },
        "x-stoplight": {
          "id": "DELETE_pets-petName",
          "beforeScript": "function(){return 'Hello World';}",
          "afterScript": "function(){return 'Hello World After';}",
          "public": true,
          "mock": {
            "enabled": true,
            "statusCode": 400
          }
        }
      },
      "get": {
        "description": "Returns a pet by name",
        "operationId": "findPetByName",
        "responses": {
          "400": {
            "description": "Returns the pet data",
            "schema": {
              "$ref": "#/definitions/pet"
            }
          }
        },
        "x-stoplight": {
          "id": "GET_pets-petName",
          "beforeScript": "function(){return 'Hello World';}",
          "afterScript": "function(){return 'Hello World After';}",
          "public": true,
          "mock": {
            "enabled": true,
            "statusCode": 400
          }
        }
      }
    }
  },
  "definitions": {
    "address": {
      "title": "address",
      "properties": {
        "street": {
          "type": "string",
          "minLength": 1
        },
        "city": {
          "type": "string",
          "minLength": 1
        },
        "state": {
          "type": "string",
          "minLength": 2,
          "maxLength": 2,
          "pattern": "^[A-Z]+$"
        },
        "zipcode": {
          "type": "integer",
          "minimum": 10000,
          "maximum": 99999
        }
      },
      "x-stoplight": {
        "id": "address",
        "name": "address",
        "public": true
      }
    },
    "veterinarian": {
      "title": "veterinarian",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "type": "string",
          "minLength": 1
        },
        "address": {
          "$ref": "#/definitions/address"
        }
      },
      "x-stoplight": {
        "id": "veterinarian",
        "name": "veterinarian",
        "public": true
      }
    },
    "pet": {
      "title": "pet",
      "required": [
        "name",
        "type"
      ],
      "properties": {
        "name": {
          "type": "string",
          "minLength": 4,
          "pattern": "^[a-zA-Z0-9- ]+$"
        },
        "age": {
          "type": "integer"
        },
        "dob": {
          "type": "string",
          "format": "date"
        },
        "type": {
          "type": "string",
          "enum": [
            "cat",
            "dog",
            "bird"
          ]
        },
        "address": {
          "$ref": "#/definitions/address"
        },
        "vet": {
          "$ref": "#/definitions/veterinarian"
        },
        "tags": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "minLength": 1
          }
        }
      },
      "x-stoplight": {
        "id": "pet",
        "name": "pet",
        "public": false
      }
    }
  },
  "securityDefinitions": {
    "basic": {
      "type": "basic"
    }
  },
  "x-stoplight": {
    "beforeScript": "function(){ return 'before stript'}",
    "afterScript": "function(){ return 'after stript'}",
    "version": {
      "groups": {
        "utilFuncs": [],
        "docs": [
          {
              "name": "Group1",
              "items": [
                  {
                      "_id": "DELETE_pets-petName-photos-id",
                      "type": "endpoints"
                  }
              ]
          },
          {
              "name": "Group2",
              "items": [
                  {
                      "_id": "GET_pets",
                      "type": "endpoints"
                  }
              ]
          },
          {
              "name": "Models",
              "items": [
                  {
                      "_id": "pet",
                      "type": "schemas"
                  }
              ]
          }
        ]
      }
    },
    "functions": {
      "onlyProcessPath": {
        "name": "onlyProcessPath",
        "description": "If your API lives at a subpath, for example, localhost:3000/api, then this function is useful to only learn / log requests that match the given subpath.",
        "script": "function (ctx, request, subpath) {\n  // for example, onlyProcessPath(ctx, request, \"api\") will turn off logging/learning for any\n  // requests that don't have \"api\" in their path.\n  if (request.url.path.get().indexOf(subpath) == -1) {\n     ctx.log.set(false)\n     ctx.learn.set(false)\n  }\n}"
      },
      "validateResponse": {
        "name": "validateResponse",
        "description": "Calling this function will validate the response, and add a response header indicating wether or not validation passed. It also adds all the validation errors to the entry messages, which are viewable in an entry tab. Lastly, it extends mocking with useful error messages.",
        "script": "function (ctx, response) {\n  var messages = response.validate(),\n      isValid = true\n      \n  if (messages.length) {\n    isValid = false\n    for (var i in messages) {\n      response.logError(messages[i])\n    }\n    \n    // If mocking is enabled and validation fails, this means \n    // the example mock we've set for this endpoint/status code \n    // does not match the schema.. we don't want developers working \n    // off of an invalid example, so here we ovewrite the response\n    // with the the validation error messages.\n    if (ctx.mock.enabled.get()) {\n      response.body.set(messages)\n    }\n  }\n  \n  response.header.set(\"Validation-Passed\", isValid)\n  ctx.isValid = isValid\n  response.valid.set(isValid)\n}"
      },
      "addRandomLatency": {
        "name": "addRandomLatency",
        "description": "Sleep for a random amount of time. Useful to simulate latency.",
        "script": "function (min, max) {\n  SL.sleep(SL.rand(min, max))\n}"
      },
      "queryStringMocking": {
        "name": "queryStringMocking",
        "description": "This extends the basic mocking functionality, and makes it possible to control mocking behavior via the request query string.",
        "script": "function (ctx, request) {\n  // For example, adding ?mock=200 to a request url will enable mocking,\n  // using the example endpoint response for the 200 status code.\n  var mock = request.url.query.get(\"mock\")\n  if (mock) {\n    ctx.mock.set(true, mock)\n  }\n}"
      },
      "validateRequest": {
        "name": "validateRequest",
        "description": "Calling this function will validate the request, and add a request header indicating wether or not validation passed. It also adds all the validation errors to the entry messages, which are viewable in an entry tab.",
        "script": "function (ctx, request) {\n  var messages = request.validate(),\n      isValid = true\n\n  if (messages.length) {\n    isValid = false\n\n    for (var i in messages) {\n      request.logError(messages[i])\n    }\n\n    // Uncomment the line below to respond immediately\n    // with the validation error messages. Useful to let\n    // developers know exactly what is wrong with their API request.\n    //\n    // var response = request.hijack(400, \"application/json\", messages)\n  }\n\n  request.header.set(\"Validation-Passed\", isValid)\n  ctx.isValid = isValid\n  request.valid.set(isValid)\n}"
      }
    },
    "textSections": {
      "todo-text-section-o2inf3829x": {
        "id": "todo-text-section-o2inf3829x",
        "name": "Todo Text Section",
        "content": "This is what a todo is.",
        "public": false
      }
    }
  },
  "x-tests": {
    "KAkHnAYKtX7HyrEjh": {
      "id": "KAkHnAYKtX7HyrEjh",
      "name": "Customer Workflow",
      "initialVariables": {},
      "steps": [
        {
          "name": "Create a New Customer",
          "capture": {
            "body": [
              {
                "name": "id",
                "value": "id"
              }
            ]
          },
          "request": {
            "method": "post",
            "url": "/v1/customers",
            "headers": [
              {
                "name": "Authorization",
                "value": "Bearer sk_test_EWBP4lLcfqRksqERLMAgtjVk"
              }
            ],
            "queryString": [],
            "postData": {
              "params": [
                {
                  "name": "description",
                  "value": "<<desc>>"
                }
              ],
              "mimeType": "application/x-www-form-urlencoded"
            },
            "authentication": {
              "authType": "basic",
              "params": []
            }
          },
          "assertions": [
            {
              "key": "response.status",
              "op": "eq",
              "value": 200
            },
            {
              "key": "response.body",
              "op": "validate.pass",
              "match": 200
            }
          ]
        },
        {
          "name": "Get New Customer",
          "capture": {},
          "request": {
            "method": "get",
            "url": "/customers/{id}",
            "headers": [
              {
                "name": "Authorization",
                "value": "Bearer sk_test_EWBP4lLcfqRksqERLMAgtjVk"
              }
            ],
            "queryString": [],
            "postData": {},
            "authentication": {
              "authType": "basic",
              "params": []
            }
          },
          "assertions": [
            {
              "key": "response.status",
              "op": "eq",
              "value": 200
            },
            {
              "key": "response.body",
              "op": "validate.pass",
              "match": 200
            }
          ]
        },
        {
          "name": "Get Customers",
          "capture": {},
          "request": {
            "method": "get",
            "url": "/customers",
            "headers": [
              {
                "name": "Authorization",
                "value": "Bearer sk_test_EWBP4lLcfqRksqERLMAgtjVk"
              }
            ],
            "queryString": [
              {
                "name": "limit",
                "value": ""
              }
            ],
            "postData": {},
            "authentication": {}
          },
          "assertions": [
            {
              "key": "response.body",
              "op": "validate.pass",
              "match": 200
            },
            {
              "key": "response.status",
              "op": "eq",
              "value": 200
            }
          ]
        },
        {
          "name": "Delete New Customer",
          "capture": {},
          "request": {
            "method": "delete",
            "url": "/customers/{id}",
            "headers": [
              {
                "name": "Authorization",
                "value": "Bearer sk_test_EWBP4lLcfqRksqERLMAgtjVk"
              }
            ],
            "queryString": [],
            "postData": {},
            "authentication": {
              "authType": "basic",
              "params": []
            }
          },
          "assertions": [
            {
              "key": "response.status",
              "op": "eq",
              "value": 200
            },
            {
              "key": "response.body",
              "op": "validate.pass",
              "match": 200
            }
          ]
        }
      ]
    },
    "yj43EHTv8yhfs4i8A": {
      "id": "yj43EHTv8yhfs4i8A",
      "name": "Charges Workflow",
      "initialVariables": {},
      "steps": [
        {
          "id": "tcBeHtbJJYEFrmzR3",
          "name": "Create Charge",
          "afterScript": "function (ctx, request, response) {\n  // Your javascript code here.\n  // Code completion enabled.\n  // You have access to a global \"SL\" object.\n  var body = response.body.get();\n  SL.variables.description = body.description;\n  //console.log(\"variables are:\", JSON.stringify(SL, null, 2))\n}",
          "capture": {
            "body": [
              {
                "name": "id",
                "value": "id"
              },
              {
                "name": "foo",
                "value": "description"
              }
            ]
          },
          "request": {
            "method": "post",
            "url": "/charges",
            "headers": [
              {
                "name": "Authorization",
                "value": "Bearer <<apiKey>>"
              }
            ],
            "queryString": [],
            "postData": {
              "mimeType": "application/x-www-form-urlencoded",
              "params": [
                {
                  "name": "currency",
                  "value": "usd",
                  "fileName": null,
                  "contentType": null
                },
                {
                  "name": "amount",
                  "value": "1000",
                  "fileName": null,
                  "contentType": null
                },
                {
                  "name": "customer",
                  "value": "cus_8NK3osrQZvQarJ",
                  "fileName": null,
                  "contentType": null
                },
                {
                  "name": "description",
                  "value": "test",
                  "fileName": null,
                  "contentType": null
                }
              ],
              "text": "{\n    \"amount\": \"integer (required)\",\n    \"currency\": \"string (required)\",\n    \"application_fee\": \"string (optional)\",\n    \"capture\": \"string (optional)\",\n    \"description\": \"string (optional)\",\n    \"destination\": \"string (optional)\",\n    \"metadata\": {},\n    \"receipt_email\": \"string (optional)\",\n    \"shipping\": {},\n    \"customer\": \"string (optional)\",\n    \"source\": \"string (optional)\"\n}"
            },
            "authentication": {}
          },
          "assertions": [
            {
              "key": "response.status",
              "op": "eq",
              "value": 200
            },
            {
              "key": "response.body",
              "op": "validate.pass",
              "match": 200
            }
          ]
        },
        {
          "id": "e8Wv6eKhNvyxLv3Hr",
          "name": "Retrieve New Charge",
          "capture": {
            "body": []
          },
          "request": {
            "method": "get",
            "url": "/charges/{id}",
            "headers": [
              {
                "name": "Authorization",
                "value": "Bearer sk_test_EWBP4lLcfqRksqERLMAgtjVk"
              }
            ],
            "queryString": [],
            "postData": {},
            "authentication": {}
          },
          "assertions": [
            {
              "key": "response.status",
              "op": "eq",
              "value": 200
            },
            {
              "key": "response.body",
              "op": "validate.pass",
              "match": 200
            }
          ]
        },
        {
          "id": "geCFWmJeEoZxCyv8c",
          "name": "Update Charge Description",
          "capture": {},
          "request": {
            "method": "post",
            "url": "/charges/{id}",
            "headers": [
              {
                "name": "Authorization",
                "value": "Bearer sk_test_EWBP4lLcfqRksqERLMAgtjVk"
              }
            ],
            "queryString": [],
            "postData": {
              "mimeType": "application/x-www-form-urlencoded",
              "params": [
                {
                  "name": "description",
                  "value": "smokey",
                  "fileName": null,
                  "contentType": null
                }
              ],
              "text": ""
            },
            "authentication": {}
          },
          "assertions": [
            {
              "key": "response.status",
              "op": "eq",
              "value": 200
            },
            {
              "key": "response.body",
              "op": "validate.pass",
              "match": 200
            }
          ]
        },
        {
          "id": "7mivusdomDTtC7esi",
          "name": "Verify Charge Update",
          "afterScript": "function (ctx, request, response) {\n  //var body = response.body.get();\n  var body = response.body.get()\n  console.log(JSON.stringify(SL, null, 2))\n  assert.notEqual(SL.variables.description, body.description, \"[Assert From Runtime] Description should be updated!\")\n}",
          "capture": {},
          "request": {
            "method": "get",
            "url": "/charges/{id}",
            "headers": [
              {
                "name": "Authorization",
                "value": "Bearer sk_test_EWBP4lLcfqRksqERLMAgtjVk"
              }
            ],
            "queryString": [],
            "postData": {},
            "authentication": {}
          },
          "assertions": [
            {
              "key": "response.status",
              "op": "eq",
              "value": 200
            },
            {
              "key": "response.body",
              "op": "validate.pass",
              "match": 200
            }
          ]
        }
      ]
    },
    "SuDCFmBBcvmyA7dCh": {
      "id": "SuDCFmBBcvmyA7dCh",
      "name": "Capture a Charge",
      "initialVariables": [
        {
          "apiKey": "sk_test_EWBP4lLcfqRksqERLMAgtjVk",
          "customer": "cus_8NK3osrQZvQarJ",
          "amount": "10014",
          "currency": "usd",
          "capture": false
        },
        {
          "apiKey": "sk_test_EWBP4lLcfqRksqERLMAgtjVk",
          "customer": "cus_8NK3osrQZvQarJ",
          "amount": "10015",
          "currency": "eur",
          "capture": false
        },
        {
          "apiKey": "sk_test_EWBP4lLcfqRksqERLMAgtjVk",
          "customer": "cus_8NK3osrQZvQarJ",
          "amount": "100027",
          "currency": "jpy",
          "capture": false
        },
        {
          "apiKey": "sk_test_EWBP4lLcfqRksqERLMAgtjVk",
          "customer": "cus_8NK3osrQZvQarJ",
          "amount": "1000004443",
          "currency": "rub",
          "capture": false
        }
      ],
      "steps": [
        {
          "id": "iA4QqZSeNHnedM24E",
          "name": "Capture Charge",
          "afterScript": "function (ctx, request, response) {\n  // Your javascript code here.\n  // Code completion enabled.\n  // You have access to a global \"SL\" object.\n  var body = response.body.get();\n  assert.isTrue(body.captured, \"Charge is captured!\");\n}",
          "capture": {},
          "request": {
            "method": "post",
            "url": "/charges/{id}/capture",
            "headers": [
              {
                "name": "Authorization",
                "value": "Bearer <<apiKey>>"
              }
            ],
            "queryString": [],
            "postData": {},
            "authentication": {}
          },
          "assertions": [
            {
              "key": "response.status",
              "op": "eq",
              "value": 200
            },
            {
              "key": "response.body",
              "op": "validate.pass",
              "match": 200
            }
          ]
        }
      ]
    },
    "6JQ389FtBw2AeM8KE": {
      "id": "6JQ389FtBw2AeM8KE",
      "name": "Circle",
      "initialVariables": {},
      "steps": [
        {
          "$ref": "#/x-tests/yj43EHTv8yhfs4i8A"
        }
      ]
    },
    "WuCyPM8JXTvGAGKHr": {
      "id": "WuCyPM8JXTvGAGKHr",
      "name": "Create uncaptured charge",
      "initialVariables": [
        {
          "apiKey": "sk_test_EWBP4lLcfqRksqERLMAgtjVk",
          "customer": "cus_8NK3osrQZvQarJ",
          "amount": "1000",
          "currency": "usd",
          "capture": false
        },
        {
          "apiKey": "sk_test_EWBP4lLcfqRksqERLMAgtjVk",
          "customer": "cus_8NK3osrQZvQarJ",
          "amount": "1001",
          "currency": "eur",
          "capture": false
        },
        {
          "apiKey": "sk_test_EWBP4lLcfqRksqERLMAgtjVk",
          "customer": "cus_8NK3osrQZvQarJ",
          "amount": "10002",
          "currency": "jpy",
          "capture": false
        },
        {
          "apiKey": "sk_test_EWBP4lLcfqRksqERLMAgtjVk",
          "customer": "cus_8NK3osrQZvQarJ",
          "amount": "1000003",
          "currency": "rub",
          "capture": false
        }
      ],
      "steps": [
        {
          "id": "Hru75NzWk2kjqFrCg",
          "name": "Create Uncaptured Charge",
          "beforeScript": "function (ctx, request) {\n  // Your javascript code here.\n  // Code completion enabled.\n  \n}",
          "afterScript": "function (ctx, request, response) {\n  // Your javascript code here.\n  // Code completion enabled.\n  // You have access to a global \"SL\" object.\n  var body = response.body.get();\n  assert.isFalse(body.captured, \"Charge should be uncaptured!\");\n}",
          "capture": {
            "body": [
              {
                "name": "id",
                "value": "id"
              }
            ]
          },
          "request": {
            "method": "post",
            "url": "/charges",
            "headers": [
              {
                "name": "Authorization",
                "value": "Bearer <<apiKey>>"
              }
            ],
            "queryString": [],
            "postData": {
              "mimeType": "application/x-www-form-urlencoded",
              "params": [
                {
                  "name": "customer",
                  "value": "<<customer>>"
                },
                {
                  "name": "currency",
                  "value": "<<currency>>"
                },
                {
                  "name": "amount",
                  "value": "<<amount>>"
                },
                {
                  "name": "capture",
                  "value": "<<capture>>"
                }
              ],
              "text": "{\n    \"amount\": \"integer (required)\",\n    \"currency\": \"string (required)\",\n    \"application_fee\": \"string (optional)\",\n    \"capture\": \"string (optional)\",\n    \"description\": \"string (optional)\",\n    \"destination\": \"string (optional)\",\n    \"metadata\": {},\n    \"receipt_email\": \"string (optional)\",\n    \"shipping\": {},\n    \"customer\": \"string (optional)\",\n    \"source\": \"string (optional)\"\n}"
            },
            "authentication": {}
          },
          "assertions": [
            {
              "key": "response.status",
              "op": "eq",
              "value": 200
            },
            {
              "key": "response.body",
              "op": "validate.pass",
              "match": 200
            }
          ]
        },
        {
          "$ref": "#/x-tests/SuDCFmBBcvmyA7dCh"
        }
      ]
    }
  }
}
